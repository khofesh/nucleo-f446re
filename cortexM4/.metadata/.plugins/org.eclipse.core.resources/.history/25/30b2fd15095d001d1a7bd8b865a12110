/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#include "main.h"
#include "led.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

uint32_t current_task = 1; // task1 is running
uint32_t g_tick_count = 0;

typedef struct {
	uint32_t psp_value;
	uint32_t block_count;
	uint32_t current_state;
	void (*task_handler)(void);
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
	enable_processor_faults();

	init_scheduler_stack(SCHED_STACK_START);

	init_tasks_stack();

	led_init_all();

	init_systick_timer(TICK_HZ);

	switch_sp_to_psp();

	task1_handler();

    /* Loop forever */
	for(;;);
}

void task1_handler()
{
	while(1)
	{
		printf("task1\n");
		led_on(LED_GREEN);
		task_delay(1000);
		led_off(LED_GREEN);
		task_delay(1000);
	}
}

void task2_handler()
{
	while(1)
	{
		printf("task2\n");
		led_on(LED_ORANGE);
		task_delay(500);
		led_off(LED_ORANGE);
		task_delay(500);
	}
}

void task3_handler()
{
	while(1)
	{
		printf("task3\n");
		led_on(LED_BLUE);
		task_delay(250);
		led_off(LED_BLUE);
		task_delay(250);
	}
}

void task4_handler()
{
	while(1)
	{
		printf("task4\n");
		led_on(LED_ORANGE);
		task_delay(125);
		led_off(LED_ORANGE);
		task_delay(125);
	}
}

void init_systick_timer(uint32_t tick_hz)
{
	// SYST_RVR
	uint32_t *pSRVR = (uint32_t *)0xE000E014;
	// SYST_CSR
	uint32_t *pSCSR = (uint32_t *)0xE000E010;

	uint32_t count_value = (SYSTICK_TIMER_CLOCK/tick_hz) - 1;

	// clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);

	// load the value in to SVR
	*pSRVR |= count_value;

	// rever to Table 4-33 SysTick SYST_CSR register bit assignments
	// settings
	*pSCSR |= (1 << 1); // enable systick exception request
	*pSCSR |= (1 << 2); // indicates the clock source, processor clock source

	// enable systick
	*pSCSR |= (1 << 0); // enable the counter
}

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
	__asm volatile("MSR MSP,%0"::"r"(sched_top_of_stack):);
	__asm volatile("BX LR");
}

void init_tasks_stack()
{
	for (int i = 0; i < MAX_TASKS; i++)
	{
		user_tasks[i].current_state = TASK_READY_STATE;
	}

	user_tasks[0].psp_value = IDLE_STACK_START;
	user_tasks[1].psp_value = T1_STACK_START;
	user_tasks[2].psp_value = T2_STACK_START;
	user_tasks[3].psp_value = T3_STACK_START;
	user_tasks[4].psp_value = T4_STACK_START;

	user_tasks[0].task_handler = idle_task;
	user_tasks[1].task_handler = task1_handler;
	user_tasks[2].task_handler = task2_handler;
	user_tasks[3].task_handler = task3_handler;
	user_tasks[4].task_handler = task4_handler;

	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;

		pPSP--;
		*pPSP = DUMMY_XPSR; // 0x01000000

		pPSP--; // PC
		*pPSP = (uint32_t) user_tasks[i].task_handler;

		pPSP--; // LR
		*pPSP = 0xFFFFFFFD;

		for (int j = 0; j < 13; j++)
		{
			pPSP--;
			*pPSP = 0;
		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
	}
}

uint32_t get_psp_value()
{
	return user_tasks[current_task].psp_value;
}

__attribute__((naked)) void switch_sp_to_psp()
{
	// initialize the PSP with task1 stack start

	// get the value of psp of current_task
	__asm volatile("PUSH {LR}"); // preserve LR which connect the main()
	__asm volatile("BL get_psp_value");
	__asm volatile("MSR PSP,R0"); // initialize PSP
	__asm volatile("POP {LR}"); // pops back LR value

	// change SP to PSP using CONTROL register
	__asm volatile("MOV R0,#0X02");
	__asm volatile("MSR CONTROL,R0");
	__asm volatile("BX LR");
}

void enable_processor_faults()
{
	// enable all configurable exceptions
	// usage fault, memManage fault and bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	// enable 18, 17, and 16 bit position
	*pSHCSR |= (1 << 16); // MEMFAULTENA
	*pSHCSR |= (1 << 17); // BUSFAULTENA
	*pSHCSR |= (1 << 18); // USGFAULTENA
}

void HardFault_Handler()
{
	printf("exception: HardFault\n");
	while(1);
}

void MemManage_Handler()
{
	printf("exception: MemManage\n");
	while(1);
}

void BusFault_Handler()
{
	printf("exception: BusFault\n");
	while(1);
}

void save_psp_value(uint32_t current_psp_value)
{
	user_tasks[current_task].psp_value = current_psp_value;
}

void update_next_task()
{
	uint32_t state = TASK_BLOCKED_STATE;

	for (int i = 0; i < MAX_TASKS; i++)
	{
		current_task++;
		current_task %= MAX_TASKS;
		state = user_tasks[current_task].current_state;

		if ((state == TASK_READY_STATE) && (current_task != 0))
		{
			break;
		}
	}

	if (state != TASK_READY_STATE)
	{
		current_task = 0;
	}
}

void schedule()
{
	uint32_t *pICSR = (uint32_t*)0xE000ED04;

	// pend the pendsv exception
	*pICSR |= (1 << 28);
}

void task_delay(uint32_t tick_count)
{
	// disable interrupt
	if (current_task)
	{
		user_tasks[current_task].block_count = g_tick_count + tick_count;
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
		schedule();
	}

	// enable interrupt
}

void idle_task()
{
	while(1);
}

void update_global_tick_count()
{
	g_tick_count++;
}

void unblock_tasks()
{
	for(int i = 1; i < MAX_TASKS; i++)
	{
		if (user_tasks[i].current_state != TASK_READY_STATE)
		{
			if (user_tasks[i].block_count == g_tick_count)
			{
				user_tasks[i].current_state = TASK_READY_STATE;
			}
		}
	}
}

__attribute__((naked)) void PendSV_Handler()
{
	// save the context of current task

	// 1. get current running task's PSP value
	__asm volatile("MRS R0,PSP");
	// 2. using that PSP value store SF2 (R4-R11)
	__asm volatile("STMDB R0!,{R4-R11}");

	__asm volatile("PUSH {LR}");

	// 3. save the current value of PSP
	__asm volatile("BL save_psp_value");

	// retrieve the context of next task

	// 1. decide next task to run
	__asm volatile("BL update_next_task");
	// 2. get its past PSP value
	__asm volatile("BL get_psp_value");
	// 3. using that PSP value to retrieve SF2(R4-R11)
	__asm volatile("LDM R0!,{R4-R11}");
	// 4. update PSP and exit
	__asm volatile("MSR PSP,R0");

	__asm volatile("POP {LR}");

	__asm volatile("BX LR");
}

void SysTick_Handler()
{
	uint32_t *pICSR = (uint32_t*)0xE000ED04;

	update_global_tick_count();
	unblock_tasks();

	// pend the pendsv exception
	*pICSR |= (1 << 28);
}

