/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void SVC_Handle_c(uint32_t *pBaseStackFrame);
int32_t add_numbers(int32_t x , int32_t y);
int32_t sub_numbers(int32_t x , int32_t y);
int32_t mul_numbers(int32_t x , int32_t y);
int32_t div_numbers(int32_t x , int32_t y);
__attribute__( ( naked ) ) void SVC_Handler();

int main(void)
{
    int32_t res;

    res = add_numbers(69, -90);
    printf("Add result = %ld\n", res);

    res = sub_numbers(69, 150);
    printf("Sub result = %ld\n", res);

    res = mul_numbers(69, 890);
    printf("mul result = %ld\n", res);

    res = div_numbers(69, -3);
    printf("div result = %ld\n", res);

    /* Loop forever */
	for(;;);
}

int32_t add_numbers(int32_t x, int32_t y)
{
    int32_t res;
    __asm volatile("SVC #36");
    __asm volatile("MOV %0,R0"
                   : "=r"(res)::);
    return res;
}

int32_t sub_numbers(int32_t x, int32_t y)
{
    int32_t res;
    __asm volatile("SVC #37");
    __asm volatile("MOV %0,R0"
                   : "=r"(res)::);
    return res;
}

int32_t mul_numbers(int32_t x, int32_t y)
{
    int32_t res;
    __asm volatile("SVC #38");
    __asm volatile("MOV %0,R0"
                   : "=r"(res)::);
    return res;
}

int32_t div_numbers(int32_t x, int32_t y)
{
    int32_t res;
    __asm volatile("SVC #39");
    __asm volatile("MOV %0,R0"
                   : "=r"(res)::);
    return res;
}

__attribute__((naked)) void SVC_Handler(void)
{
    __asm("MRS r0,MSP");
    __asm("B SVC_Handler_c");
}

void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
	int16_t arg0, arg1, res;

	printf("inside SVC handler\n");

	uint8_t *pReturnAddr = (uint8_t*)pBaseOfStackFrame[6];

	printf("ReturnAddr %p\n", pReturnAddr);

	// decrement the return address by 2 to point to
	// opcode of the SVC instruction in the program memory
	pReturnAddr -=2;

	// extract the SVC number
	// least-significant bit of the opcode
	uint8_t svc_number = *pReturnAddr;

	printf("svc number is: %d\n", svc_number);

	arg0 = pBaseOfStackFrame[0]; // get the value of R0
	arg1 = pBaseOfStackFrame[1]; // get the value of R1

    /*SVC number signifies the type of operation , decode it */
    switch (svc_number)
    {
    case 36:
        /* addition */
    	res = arg0 + arg1;
        break;
    case 37:
        /* Subtraction */
    	res = arg0 - arg1;
        break;
    case 38:
        /* Multiplication */
    	res = arg0 * arg1;
        break;
    case 39:
        /* division */
    	res = arg0 / arg1;
        break;
    default:
        printf("invalid svc code\n");
    }

    /*store the result back to stack frame at R0's position */
    pBaseOfStackFrame[0] = <store the result here> // TODO
}


