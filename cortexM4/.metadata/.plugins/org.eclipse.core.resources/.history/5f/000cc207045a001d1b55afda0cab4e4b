/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void HardFault_Handler();
void MemManage_Handler();
void BusFault_Handler();
void UsageFault_Handler();

int main(void)
{
	// enable all configurable exceptions
	// usage fault, mem manage fault and bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	// enable 18, 17, and 16 bit position
	*pSHCSR |= (1 << 16); // MEMFAULTENA
	*pSHCSR |= (1 << 17); // BUSFAULTENA
	*pSHCSR |= (1 << 18); // USGFAULTENA

	// force the processor to execute some undefined instruction
	uint32_t *pSRAM = (uint32_t*)0x20010000;
	*pSRAM = 0xFFFFFFFF;

	void (*something)(void);
	something = (void*)0x20010001; // make the last bit 1
	something();

	// analyze the fault

    /* Loop forever */
	for(;;);
}

// implement the fault handlers

void HardFault_Handler()
{
	printf("exception: HardFault\n");
	while(1);
}

void MemManage_Handler()
{
	printf("exception: MemManage\n");
	while(1);
}

void BusFault_Handler()
{
	printf("exception: BusFault\n");
	while(1);
}

void UsageFault_Handler()
{
	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	printf("exception: UsageFault\n");
	printf("USFR = %lx\n", (*pUFSR) & 0xFFFF);
	while(1);
}
